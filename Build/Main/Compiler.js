"use strict";function requireUncached(e){return delete require.cache[require.resolve(e)],require(e)}var _prototypeProperties=function(e,r,i){r&&Object.defineProperties(e,r),i&&Object.defineProperties(e.prototype,i)},_classCallCheck=function(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")},Promise=requireUncached("a-promise"),FS=requireUncached("fs"),Path=requireUncached("path"),Compiler=function(){function e(){_classCallCheck(this,e);var r=requireUncached("./Plugins/Compiler-JS");this.Map={JS:{Compiler:r,Opts:{Compiler:"Babel"}},JSX:{Compiler:r,Opts:{Compiler:"Babel"}},TAG:{Compiler:r,Opts:{Compiler:"Riot"}}}}return _prototypeProperties(e,null,{Compile:{value:function(e,r,i){return new Promise(function(t,o){FS.exists(e,function(n){if(!n)return o("Source file "+e+" doesn't exist");var p=e.split(".").pop().toUpperCase(),c=this.Map[p].Opts;return c.TargetFile=r||null,c.SourceMap=i||null,this.Map.hasOwnProperty(p)?void this.Map[p].Compiler.Process(e,c).then(function(e){return c=e.Opts,c.TargetFile?void FS.writeFile(c.TargetFile,e.Content,function(r){return r?o(r):void(c.SourceMap?FS.writeFile(c.SourceMap,e.SourceMap,t):t())}):t(e)})["catch"](o):o("The given file type is not recognized")}.bind(this))}.bind(this))},writable:!0,configurable:!0}}),e}();module.exports=Compiler;